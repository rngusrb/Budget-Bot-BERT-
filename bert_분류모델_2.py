#google colab(GPU)에서 작성한 분류모델 내부 코드
# -*- coding: utf-8 -*-
"""Bert 분류모델 -2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vfvqpzEcyBcIQIpwWb41y5OeraAxAX4p

http://yonghee.io/bert_binary_classification_naver/
"""

!pip install transformers

import torch

from transformers import BertTokenizer
from transformers import BertForSequenceClassification, AdamW, BertConfig
from transformers import get_linear_schedule_with_warmup
from torch.utils.data import TensorDataset, DataLoader, RandomSampler, SequentialSampler
from keras.utils import pad_sequences
from sklearn.model_selection import train_test_split

import pandas as pd
import numpy as np
import random
import time
import datetime

import os

n_devices = torch.cuda.device_count()
print(n_devices)

for i in range(n_devices):
    print(torch.cuda.get_device_name(i))

data = pd.read_csv('/content/sample_data/redata.csv')

print(data.shape)

print(len(data.loc[data['label'] == 0]))
print(len(data.loc[data['label'] == 1]))
print(len(data.loc[data['label'] == 2]))

print(data)

document_bert = ["[CLS] " + str(s) + " [SEP]" for s in data['상호명']]
document_bert[:5]

def print_class_num(df, label_name):            # 이진 클래스의 비율을 알아보기 위한 함수
  n_total = len(df)                             # 데이터의 총 개수
  n_1 = len(df.query(label_name + ' == 0'))   # label로 사용하는 열의 1 개수
  n_2 = len(df.query(label_name + ' == 1'))   # label로 사용하는 열의 0 개수
  n_3 = len(df.query(label_name + ' == 2')) 
  print("식비: {}개, {:.2f}%".format(n_1, n_1*100/n_total))
  print("마트/편의점: {}개, {:.2f}%".format(n_2, n_2*100/n_total))
  print("교육: {}개, {:.2f}%\n".format(n_3, n_3*100/n_total))

  values = df[label_name].value_counts()        # label로 사용하는 열의 값을 카운트 
  values.plot(kind='bar')
  print(values)

print_class_num(data, 'label')

tokenizer = BertTokenizer.from_pretrained('bert-base-multilingual-cased', do_lower_case=False)
tokenized_texts = [tokenizer.tokenize(s) for s in document_bert]
print(tokenized_texts[0])

print(tokenizer.tokenize('이디야커피'))

max_len =0
for i in tokenized_texts:
  if max_len < len(i):
    max_len = len(i)
print(max_len)

MAX_LEN = 32
input_ids = [tokenizer.convert_tokens_to_ids(x) for x in tokenized_texts]
input_ids = pad_sequences(input_ids, maxlen=MAX_LEN, dtype='long', truncating='post', padding='post')
input_ids[0]

attention_masks = []

for seq in input_ids:
    seq_mask = [float(i>0) for i in seq]
    attention_masks.append(seq_mask)
    
print(attention_masks[0])

input_ids=np.asarray(input_ids)
attention_masks=np.array(attention_masks)

#train, test 나누기
x_train, x_test, y_train, y_test, mask_train, mask_test = train_test_split(input_ids, data['label'].values, attention_masks, test_size=0.2, random_state=42, stratify = data['label'])
print("x_train: {}개,\ty_train: {}개".format(len(x_train), len(y_train)))
print("x_test: {}개,\ty_test: {}개".format(len(x_test), len(y_test)))
print("mask_train: {}개,\tmask_test: {}개".format(len(mask_train), len(mask_test)))

x_train, x_valid, y_train, y_valid, mask_train, mask_valid = train_test_split(x_train, y_train, mask_train, test_size=0.2, random_state=42, stratify = y_train)
print("x_train: {}개,\ty_train: {}개".format(len(x_train), len(y_train)))
print("x_valid: {}개,\ty_valid: {}개".format(len(x_valid), len(y_valid)))
print("mask_train: {}개,\tmask_valid: {}개".format(len(mask_train), len(mask_valid)))



#데이터 불균형 처리
y_train = pd.DataFrame(y_train)
x_train = pd.DataFrame(x_train)
mask_train = pd.DataFrame(mask_train)

xm_train = pd.concat([x_train, mask_train], axis=1)

y_t = np.array(y_train)

xm_train['label'] = y_t
nn1_train = xm_train[xm_train['label'] == 1]
nn2_train = xm_train[xm_train['label'] == 2]

nn1_train = nn1_train.reset_index(drop = True)
nn2_train = nn2_train.reset_index(drop = True)
print(nn1_train)

print(y_t)

#RD
import random
rd1_train = nn1_train.copy()
rand_num = random.randint(1, 31)

for i in range(len(rd1_train)):
  if(int(rd1_train.iloc[i, rand_num]) != 0 and int(rd1_train.iloc[i, rand_num]) != 102):
    rd1_train.iloc[i, rand_num] = 103
  else:
    while(int(rd1_train.iloc[i, rand_num]) == 0 or int(rd1_train.iloc[i, rand_num]) == 102):
      rand_num = random.randint(1,31)
      if(int(rd1_train.iloc[i, rand_num]) != 0 and int(rd1_train.iloc[i, rand_num]) != 102):
        rd1_train.iloc[i, rand_num] = 103
  rand_num = random.randint(1,31)

# row 생략 없이 출력
pd.set_option('display.max_rows', None)
# col 생략 없이 출력
pd.set_option('display.max_columns', None)

print(rd1_train)

#RS
"""
c = 0
rs_train = nn1_train.copy()

rand_1 = random.randint(1, 8)
rand_2 = rand_1
while rand_2 == rand_1:
  rand_2 = random.randint(1, 8)

for i in range(len(rs_train)):
  n_arr =[]
  for a in rs_train.loc[i]:
    if a != 0 and a!= 0.0 and a!= 0.1 and a != 1:
      n_arr.append(a)
  if len(n_arr) == 3:
    continue
  if (int(rs_train.iloc[i, rand_1]) != 0 and int(rs_train.iloc[i, rand_1]) != 102 and int(rs_train.iloc[i, rand_2]) != 0 and int(rs_train.iloc[i, rand_2]) != 102):
    rs_train.iloc[i, rand_1], rs_train.iloc[i, rand_2] = rs_train.iloc[i, rand_2], rs_train.iloc[i, rand_1]
    print(c)
    c+=1

  else:
    while(int(rs_train.iloc[i, rand_1]) == 0 or int(rs_train.iloc[i, rand_1]) == 102 or int(rs_train.iloc[i, rand_2]) == 0 or int(rs_train.iloc[i, rand_2]) == 102):
      rand_1 = random.randint(1, 8)
      rand_2 = rand_1
      while rand_2 == rand_1:
        rand_2 = random.randint(1,8)
      if (int(rs_train.iloc[i, rand_1]) != 0 and int(rs_train.iloc[i, rand_1]) != 102 and int(rs_train.iloc[i, rand_2]) != 0 and int(rs_train.iloc[i, rand_2]) != 102):
        print(c)
        c +=1
        rs_train.iloc[i, rand_1], rs_train.iloc[i, rand_2] = rs_train.iloc[i, rand_2], rs_train.iloc[i, rand_1]
        break
  rand_1 = random.randint(1,8)
  rand_2 = rand_1
  while rand_2 == rand_1:
    rand_2 = random.randint(1,8)
print(rs_train)
"""

#레이블 1인 데이터 합치기
result_train1 = pd.concat([nn1_train,rd1_train], ignore_index=True)

print(result_train1)

#label 1, 2 합치기
result0_train = xm_train[xm_train['label'] == 0]
result0_train = result0_train.reset_index(drop = True)
result12_train = pd.concat([result_train1,nn2_train], ignore_index=True)
result_train = pd.concat([result0_train,result12_train], ignore_index=True)

values = result_train['label'].value_counts()
values.plot(kind='bar')
print(values)

print(result_train)

#x, y, mask 로 나누기
x_train_add = []
y_train_add = []
mask_train_add = []
for i in range(len(result_train)):
  x_train_add.append(result_train.iloc[i, 0:32].to_numpy())
  mask_train_add.append(result_train.iloc[i, 32:64].to_numpy())
  y_train_add.append(result_train.loc[i,'label'])

x_train_add = np.asarray(x_train_add,dtype = int)
y_train_add = list(map(int,y_train_add))

print(x_train_add[2140])
print(y_train_add[2140])
print(mask_train_add[2140])

train_inputs = torch.tensor(x_train_add)
train_labels = torch.tensor(y_train_add)
train_masks = torch.tensor(mask_train_add)
validation_inputs = torch.tensor(x_valid)
validation_labels = torch.tensor(y_valid)
validation_masks = torch.tensor(mask_valid)

BATCH_SIZE = 32

train_data = TensorDataset(train_inputs, train_masks, train_labels)
train_sampler = RandomSampler(train_data)
train_dataloader = DataLoader(train_data, sampler=train_sampler, batch_size=BATCH_SIZE)

validation_data = TensorDataset(validation_inputs, validation_masks, validation_labels)
validation_sampler = SequentialSampler(validation_data)
validation_dataloader = DataLoader(validation_data, sampler=validation_sampler, batch_size=BATCH_SIZE)

test_inputs = torch.tensor(x_test)
test_labels = torch.tensor(y_test)
test_masks = torch.tensor(mask_test)

test_data = TensorDataset(test_inputs, test_masks, test_labels)
test_sampler = RandomSampler(test_data)
test_dataloader = DataLoader(test_data, sampler=test_sampler, batch_size=BATCH_SIZE)

if torch.cuda.is_available():    
    device = torch.device("cuda")
    print('There are %d GPU(s) available.' % torch.cuda.device_count())
    print('We will use the GPU:', torch.cuda.get_device_name(0))
else:
    device = torch.device("cpu")
    print('No GPU available, using the CPU instead.')

model = BertForSequenceClassification.from_pretrained("bert-base-multilingual-cased", num_labels=3)
model.cuda()

# 옵티마이저 설정
optimizer = AdamW(model.parameters(),
                  lr = 2e-5, # 학습률
                  eps = 1e-8 # 0으로 나누는 것을 방지하기 위한 epsilon 값
                )

# 에폭수
epochs = 8

# 총 훈련 스텝
total_steps = len(train_dataloader) * epochs

# lr 조금씩 감소시키는 스케줄러
scheduler = get_linear_schedule_with_warmup(optimizer, 
                                            num_warmup_steps = 0,
                                            num_training_steps = total_steps)

# 정확도 계산 함수
def flat_accuracy(preds, labels):
    pred_flat = np.argmax(preds, axis=1).flatten()
    labels_flat = labels.flatten()
    return np.sum(pred_flat == labels_flat) / len(labels_flat)

# 시간 표시 함수
def format_time(elapsed):
    # 반올림
    elapsed_rounded = int(round((elapsed)))
    # hh:mm:ss으로 형태 변경
    return str(datetime.timedelta(seconds=elapsed_rounded))

# 재현을 위해 랜덤시드 고정
seed_val = 42
random.seed(seed_val)
np.random.seed(seed_val)
torch.manual_seed(seed_val)
torch.cuda.manual_seed_all(seed_val)

# 그래디언트 초기화
model.zero_grad()

# 에폭만큼 반복
for epoch_i in range(0, epochs):
    
    # ========================================
    #               Training
    # ========================================
    
    print("")
    print('======== Epoch {:} / {:} ========'.format(epoch_i + 1, epochs))
    print('Training...')

    # 시작 시간 설정
    t0 = time.time()

    # 로스 초기화
    total_loss = 0

    # 훈련모드로 변경
    model.train()
        
    # 데이터로더에서 배치만큼 반복하여 가져옴
    for step, batch in enumerate(train_dataloader):
        # 경과 정보 표시
        if step % 500 == 0 and not step == 0:
            elapsed = format_time(time.time() - t0)
            print('  Batch {:>5,}  of  {:>5,}.    Elapsed: {:}.'.format(step, len(train_dataloader), elapsed))

        # 배치를 GPU에 넣음
        batch = tuple(t.to(device) for t in batch)
        
        # 배치에서 데이터 추출
        b_input_ids, b_input_mask, b_labels = batch

        # Forward 수행                
        outputs = model(b_input_ids, 
                        token_type_ids=None, 
                        attention_mask=b_input_mask, 
                        labels=b_labels)
        
        # 로스 구함
        loss = outputs[0]

        # 총 로스 계산
        total_loss += loss.item()

        # Backward 수행으로 그래디언트 계산
        loss.backward()

        # 그래디언트 클리핑
        torch.nn.utils.clip_grad_norm_(model.parameters(), 1.0)

        # 그래디언트를 통해 가중치 파라미터 업데이트
        optimizer.step()

        # 스케줄러로 학습률 감소
        scheduler.step()

        # 그래디언트 초기화
        model.zero_grad()

    # 평균 로스 계산
    avg_train_loss = total_loss / len(train_dataloader)            

    print("")
    print("  Average training loss: {0:.2f}".format(avg_train_loss))
    print("  Training epcoh took: {:}".format(format_time(time.time() - t0)))
        
    # ========================================
    #               Validation
    # ========================================

    print("")
    print("Running Validation...")

    #시작 시간 설정
    t0 = time.time()

    # 평가모드로 변경
    model.eval()

    # 변수 초기화
    eval_loss, eval_accuracy = 0, 0
    nb_eval_steps, nb_eval_examples = 0, 0

    # 데이터로더에서 배치만큼 반복하여 가져옴
    for batch in validation_dataloader:
        # 배치를 GPU에 넣음
        batch = tuple(t.to(device) for t in batch)
        
        # 배치에서 데이터 추출
        b_input_ids, b_input_mask, b_labels = batch
        
        # 그래디언트 계산 안함
        with torch.no_grad():     
            # Forward 수행
            outputs = model(b_input_ids, 
                            token_type_ids=None, 
                            attention_mask=b_input_mask)
        
        # 로스 구함
        logits = outputs[0]

        # CPU로 데이터 이동
        logits = logits.detach().cpu().numpy()
        label_ids = b_labels.to('cpu').numpy()
        
        # 출력 로짓과 라벨을 비교하여 정확도 계산
        tmp_eval_accuracy = flat_accuracy(logits, label_ids)
        eval_accuracy += tmp_eval_accuracy
        nb_eval_steps += 1

    print("  Accuracy: {0:.2f}".format(eval_accuracy/nb_eval_steps))
    print("  Validation took: {:}".format(format_time(time.time() - t0)))

print("")
print("Training complete!")

#시작 시간 설정
t0 = time.time()

# 평가모드로 변경
model.eval()

# 변수 초기화
eval_loss, eval_accuracy = 0, 0
nb_eval_steps, nb_eval_examples = 0, 0

# 데이터로더에서 배치만큼 반복하여 가져옴
for step, batch in enumerate(test_dataloader):
    # 경과 정보 표시
    if step % 100 == 0 and not step == 0:
        elapsed = format_time(time.time() - t0)
        print('  Batch {:>5,}  of  {:>5,}.    Elapsed: {:}.'.format(step, len(test_dataloader), elapsed))

    # 배치를 GPU에 넣음
    batch = tuple(t.to(device) for t in batch)
    
    # 배치에서 데이터 추출
    b_input_ids, b_input_mask, b_labels = batch
    
    # 그래디언트 계산 안함
    with torch.no_grad():     
        # Forward 수행
        outputs = model(b_input_ids, 
                        token_type_ids=None, 
                        attention_mask=b_input_mask)
    
    # 로스 구함
    logits = outputs[0]

    # CPU로 데이터 이동
    logits = logits.detach().cpu().numpy()
    label_ids = b_labels.to('cpu').numpy()
    
    # 출력 로짓과 라벨을 비교하여 정확도 계산
    tmp_eval_accuracy = flat_accuracy(logits, label_ids)
    print(logits, label_ids)
    eval_accuracy += tmp_eval_accuracy
    nb_eval_steps += 1

print("")
print("Accuracy: {0:.2f}".format(eval_accuracy/nb_eval_steps))
print("Test took: {:}".format(format_time(time.time() - t0)))

# 입력 데이터 변환
def convert_input_data(s):
    """
    import re
    
    ## (1) [], (), {}, <> 괄호와 괄호 안 문자 제거하기
    pattern = r'\([^)]*\)'  # ()
    s = re.sub(pattern=pattern, repl='', string=s)
    
    pattern = r'\[[^)]*\]'  # []
    s = re.sub(pattern=pattern, repl='', string=s)
    
    pattern = r'\<[^)]*\>'  # <>
    s = re.sub(pattern=pattern, repl='', string=s)
    
    pattern = r'\{[^)]*\}'  # {}
    s = re.sub(pattern=pattern, repl='', string=s)
    
    ## (2) '...점' 제거하기
    for i in s.split():
      if i.endswith('점'):
        s = s.replace(i, '')
    #s = s.replace('...점', ' ')

    
    ## (3) 특수문자 제거
    pattern = r'[^a-zA-Z가-힣0-9]'
    s = re.sub(pattern=pattern, repl=' ', string=s)
    """

    # BERT의 토크나이저로 문장을 토큰으로 분리
    tokenized_texts = [tokenizer.tokenize(sent) for sent in s]

    # 입력 토큰의 최대 시퀀스 길이
    MAX_LEN = 32

    # 토큰을 숫자 인덱스로 변환
    input_ids = [tokenizer.convert_tokens_to_ids(x) for x in tokenized_texts]
    
    # 문장을 MAX_LEN 길이에 맞게 자르고, 모자란 부분을 패딩 0으로 채움
    input_ids = pad_sequences(input_ids, maxlen=MAX_LEN, dtype="long", truncating="post", padding="post")

    # 어텐션 마스크 초기화
    attention_masks = []

    # 어텐션 마스크를 패딩이 아니면 1, 패딩이면 0으로 설정
    # 패딩 부분은 BERT 모델에서 어텐션을 수행하지 않아 속도 향상
    for seq in input_ids:
        seq_mask = [float(i>0) for i in seq]
        attention_masks.append(seq_mask)

    # 데이터를 파이토치의 텐서로 변환
    inputs = torch.tensor(input_ids)
    masks = torch.tensor(attention_masks)

    return inputs, masks

model.save_pretrained('/content/drive/MyDrive/bert-re')



# 문장 테스트
def test_sentences(sentences):

    # 평가모드로 변경
    model.eval()

    # 문장을 입력 데이터로 변환
    inputs, masks = convert_input_data(sentences)

    # 데이터를 GPU에 넣음
    b_input_ids = inputs.to(device)
    b_input_mask = masks.to(device)
            
    # 그래디언트 계산 안함
    with torch.no_grad():     
        # Forward 수행
        outputs = model(b_input_ids, 
                        token_type_ids=None, 
                        attention_mask=b_input_mask)

    # 출력 로짓 구함
    logits = outputs[0]

    # CPU로 데이터 이동
    logits = logits.detach().cpu().numpy()

    return logits

logits = test_sentences(['gs25 용현정석점'])

print(logits)
print(np.argmax(logits))

logits = test_sentences(['문우당서림'])

print(logits)
print(np.argmax(logits))

logits = test_sentences(['엔젤이너스'])

print(logits)
print(np.argmax(logits))


logits = test_sentences(['맛있는 치킨'])

print(logits)
print(np.argmax(logits))

logits = test_sentences(['후라토식당'])

print(logits)
print(np.argmax(logits))
